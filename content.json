[{"title":"SpringBoot常用注解","date":"2022-03-07T08:09:17.000Z","path":"2022/03/07/SpringBoot常用注解/","text":"时间格式化注解 @DateTimeFormat 和 @JsonFormat @DateTimeFormat：指定入参的时间格式，入参的格式不正确会报错。 12345@Datapublic class DateVo &#123; @DateTimeFormat(pattern=&quot;yyyy-MM-dd HH:mm:ss&quot;) private Date date;&#125; @JsonFormat : 对数据库中查询出的时间类型的数据进行格式化，jackson在序列化时间时是按照国际标准时间GMT进行格式化的，而在国内默认时区使用的是CST时区，两者相差8小时。该注解集成在spring-boot-start-web 下无需再引入依赖。 123456@Datapublic class DateVo &#123; @DateTimeFormat(pattern=&quot;yyyy-MM-dd HH:mm:ss&quot;) @JsonFormat(pattern=&quot;yyyy-MM-dd HH:mm:ss&quot;, timezone=&quot;GMT+8&quot;) private Date date;&#125;","tags":[{"name":"SpringBoot注解","slug":"SpringBoot注解","permalink":"https://zhoufengbin.github.io/tags/SpringBoot%E6%B3%A8%E8%A7%A3/"}]},{"title":"hydee小技术","date":"2022-02-13T12:48:19.000Z","path":"2022/02/13/hydee小技术/","text":"1. 多数据源切换2. 防止表单重复提交3. 误删数据库表或数据的恢复方法。","tags":[{"name":"hydee","slug":"hydee","permalink":"https://zhoufengbin.github.io/tags/hydee/"}]},{"title":"hexo的使用技巧","date":"2022-02-10T10:04:16.000Z","path":"2022/02/10/hexo的使用技巧/","text":"1. 主题1.1 设置或更换主题 下载合适Hexo主题压缩包，将其解压到博客根目录下的themes目录中。 修改 _config.yml 配置文件中theme属性的值为themes中合适的主题文件夹名。 1.2 主题生效或上传Git命令1234-- hexo clean 清除下 Hexo 的缓存-- hexo generate 博客重新生成, 简写 hexo g-- hexo s 本地启动。 http://localhost:4000 可查看(当4000端口被占用可 hexo s -port 选择合适的端口启动。)-- hexo d 部署到git 1.3 创建文件1hexo new &lt;filename&gt;","tags":[{"name":"hexo","slug":"hexo","permalink":"https://zhoufengbin.github.io/tags/hexo/"}]},{"title":"工作BUG","date":"2022-02-10T09:08:03.000Z","path":"2022/02/10/工作BUG/","text":"1. Spring Boot利用K8S部署存在多个实例。 误操作导致的，将本地的配置文件信息上传到了Git上覆盖了分支上的配置文件信息，导致服务启动无法自动替换。","tags":[{"name":"BUG","slug":"BUG","permalink":"https://zhoufengbin.github.io/tags/BUG/"}]},{"title":"MyBaits的使用","date":"2022-01-14T01:11:06.000Z","path":"2022/01/14/MyBaits的使用/","text":"MyBatisMyBatis的模糊查询 方式一 1`field_name` like concat(&#x27;%&#x27;, #&#123;value&#125;, &#x27;%&#x27;) 栗子 1`group_name` like concat(&#x27;%&#x27;,#&#123;groupName&#125;, &#x27;%&#x27;) 方式二 1`field_name` like concat(&#x27;%&#x27;, $&#123;value&#125;, &#x27;%&#x27;) 栗子 1`group_name` like concat(&#x27;%&#x27;,$&#123;groupName&#125;, &#x27;%&#x27;) 总结： #{ }是预编译处理，MyBatis在处理#{ }时，它会将sql中的#{ }替换为？，然后调用PreparedStatement的set方法来赋值，传入字符串后，会在值两边加上单引号，使用占位符的方式提高效率，可以防止sql注入。 ${}:表示拼接sql串，将接收到参数的内容不加任何修饰拼接在sql中，可能引发sql注入。 MyBatis分页功能 创建分页对象，根据不同的构造方法创建合适的分页对象。 1IPage&lt;T&gt; page = new Page&lt;&gt;(); 将page对象作为参数传给待查询方法中，方法返回一个page对象和传入的page对象是同一个。 1IPage&lt;T&gt; queryGroupProgramInfo(IPage&lt;T&gt; page,@Param(&quot;reqDTO&quot;)xxxDTO reqDTO); page对象中常用的方法 方法名称 功能 page.getRecords() 获取分页的数据。 page.getTotal() 数据的总条数 page.getCurrent() 当前页码 page.getPages() 总页数 page.getSize() 每页的条数","tags":[{"name":"MyBatis","slug":"MyBatis","permalink":"https://zhoufengbin.github.io/tags/MyBatis/"}]},{"title":"Java集合之List","date":"2022-01-13T06:58:56.000Z","path":"2022/01/13/Java集合之List/","text":"1、List集合1.1 List集合的排序 内部类方式—Comparator 123456789101112// 升序排序Collections.sort(list, new Comparator&lt;test&gt;() &#123; @Override public int compare(test o1, test o2) &#123; return o1.getCmonth().compareTo(o2.getCmonth()); &#125; // 降序排序Collections.sort(list, new Comparator&lt;test&gt;() &#123; @Override public int compare(test o1, test o2) &#123; return o1.getCmonth().compareTo(o2.getCmonth()); &#125; 实现比较类—Comparable 123456789101112131415161718192021@Datapublic class Test implements Comparable&lt;Test&gt;&#123; private String name; private Integer age; // 升序排序 @Override public int compareTo(Test o) &#123; return this.age.compareTo(o.getAge()); &#125; // 降序排序 @Override public int compareTo(Test o) &#123; return this.age.compareTo(o.getAge()); &#125;&#125;//需要排序的集合排序 List&lt;Test&gt;Collections.sort(list); Stream流方式 1234567// stream流方式-降序排序(逆序排序)list = list.stream().sorted(Comparator.comparing(test::getAge) .reversed()) .collect(Collectors.toList());//stream流方式-升序排序list =list.stream().sorted(Comparator.comparing(test::getAge)) .collect(Collectors.toList());","tags":[{"name":"List","slug":"List","permalink":"https://zhoufengbin.github.io/tags/List/"}]},{"title":"Docker的使用","date":"2022-01-12T08:13:23.000Z","path":"2022/01/12/Docker的使用/","text":"Docker常用命令 功能 命令 启动Docker systemctl start docker 查看全部容器 docker ps -a 查看运行中的容器 docker ps 启动停止的容器 docker start &lt;containerName(container)&gt; 停止容器 docker stop &lt;containerName(containerId)&gt; 删除容器 docker rm $ContainerName(或者$ContainerId) Docker部署MySQL8启动运行MySQL镜像1docker run -p 3306:3306 --name MySQL8.0 -e MYSQL_ROOT_PASSWORD=041225 -d mysql:8.0 进入MySQL12docker exec -it &lt;CONTAINER ID&gt; bashmysql -u root -p 栗子 123[root@izbp116fn1k2l4hhdnx2iyz ~]# docker exec -it 88c99b8037f9 bashroot@88c99b8037f9:/# mysql -u root -pEnter password: 处理SQLYog无法连接MySQL8 进入MySQL容器 执行命令 1ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;password&#x27;; 12ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;041225&#x27;;FLUSH PRIVILEGES; 重启MySQL镜像1docker restart &lt;CONTAINER ID&gt;","tags":[{"name":"Docker","slug":"Docker","permalink":"https://zhoufengbin.github.io/tags/Docker/"}]},{"title":"MySQL数据库常用SQL操作","date":"2022-01-12T07:04:53.000Z","path":"2022/01/12/MySQL数据库常用SQL操作/","text":"一、基本SQL1. 查看MySQL数据库版本1SELECT VERSION(); 2. 常见关键字 CURRENT_TIMESTAMP DEFAULT CURRENT_TIMESTAMP 表示当插入数据的时候，该字段默认值为当前时间 ON UPDATE CURRENT_TIMESTAMP 表示每次更新这条数据的时候，该字段都会更新成当前时间 栗子 12345CREATE TABLE `test` ( `text` varchar(255) DEFAULT &#x27;&#x27; COMMENT &#x27;内容&#x27;, `create_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#x27;创建时间&#x27;, `update_time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT &#x27;更新时间&#x27;) ENGINE=InnoDB DEFAULT CHARSET=utf8; 3. 常用函数 日期函数 YEAR(date) 获取date类型数据的年 MONTH(date) 获取date类型数据的月 DAY(date) 获取date类型数据的日 CONCAT() 字符串拼接函数 concat(col_1, col_2, …) 栗子1：concat函数中无null 1SELECT region_id, region_name, CONCAT(region_id, &#x27;-&#x27;, region_name) AS a FROM regions; 结果集： 123456region_id region_name a --------- ---------------------- -------------------------- 1 Europe 1-Europe 2 Americas 2-Americas 3 Asia 3-Asia 4 Middle East and Africa 4-Middle East and Africa 栗子1：concat函数中有null 1SELECT region_id, region_name, CONCAT(region_id, null, region_name) AS a FROM regions; 结果集 123456region_id region_name a --------- ---------------------- -------- 1 Europe (NULL) 2 Americas (NULL) 3 Asia (NULL) 4 Middle East and Africa (NULL) 3. SQL 创建/修改唯一索引 创建 1UNIQUE [INDEX | KEY] [&lt;索引名&gt;] [&lt;索引类型&gt;] (&lt;列名&gt;,…) 栗子 1UNIQUE KEY `unique_index`(`group_id`, `company_id`, `business_id`) 注意事项：在创建唯一索引时，一定要保证索引的唯一性。如上面栗子的索引字段，保存数据时是重复的，此时索引创建会报错。 修改 12ALTER TABLE `TableName` DROP INDEX `INDEX_NAME`;ALTER TABLE `TableName` ADD UNIQUE INDEX_NAME(`COLUMN`); 栗子 12ALTER TABLE follow_heart_store_sales_target_collect DROP INDEX `unique_index`ALTER TABLE follow_heart_store_sales_target_collect ADD UNIQUE KEY `unique_index`(`cdate`,`group_id`, `company_id`, `business_id`) 注意：修改索引实际上是删除旧索引后，重新创建合适的索引。 二、CTE(公共表表达式)1. 什么是公用表表达式或CTE？ 公用表表达式是一个命名的临时结果集(临时表)，仅在单个SQL语句(例如SELECT，INSERT，UPDATE或DELETE)的执行范围内存在。 CTE不作为对象存储，仅在查询执行期间持续。 CTE可以是自引用(递归CTE)，也可以在同一查询中多次引用。 与派生表相比，CTE提供了更好的可读性和性能。 2. CTE语法 CTE主要构成： 临时表名，展示临时表列 (不写默认展示所有)，定义CTE的查询 (单个SQL语句)。 123456789WITH cte_name1[(column_list)] AS ( //单个SQL语句(一般都是查询操作)),cte_name2 AS[(column_list)] ( //单个SQL语句),...SELECT column_name1,[column_name2,...]FROM cte_name1,cte_name2; 三、MySQL8.0 窗口函数3.1 什么是窗口函数？ 窗口函数在MySQL8+才支持的函数，又称分析函数。 窗口函数 = 窗口 + 函数。 窗口的大小可以是固定的，也可以是可变的，还可以是滑动的。 窗口函数可以在查询出来的结果集(该结果集肯定满足某些条件)上，设置一个窗口，为窗口内的每条数据都执行一次窗口函数。 一般窗口函数对应的列，会紧跟结果集的后面。 3.2 窗口函数语法1windows_function([expression]) over([partition by &lt;分区的列&gt;] [order by &lt;排序的列&gt;] [rows between &lt;范围&gt;]) over中参数可省略。如果为空，则窗口的大小是满足where条件的所有数据大小。 rows betweet的实例 123456789rows between 2 preceding and current row -- 取当前行和前面两行。rows between unbounded preceding and current row -- 取当前行和前面所有行。rows between current row and unbounded following -- 取当前行和后面所有行。rows between 3 preceding and current row -- 取当前行和前三行。rows between 3 precding and 1 following -- 取当前行和前三行和后一行，共5行。 当省略 rows bteween ,则默认为 rows between unbounded preceding and current row。 当省略 order by 和 rows between , 则默认为 rows between unbounded preceding and unbounded following 3.3 窗口函数分类 排名窗口函数 rank dense_rank percent_rank row_number4 ntile cume_dist 取值窗口函数 lag lead first_value last_value nth_value 聚合窗口函数 ave sum count max min SQL 窗口函数速查表_Tony.Dong的专栏-CSDN博客 3.4 窗口函数应用 附录1： windows命令行操作数据库1. 命令行启动停止MySQL123net start/stop &lt;服务名称&gt;启动: net start mysql80停止: net stop mysql80 2.进入MySQL1mysql -u root -p -h localhost [-P 3308]","tags":[{"name":"MySQL","slug":"MySQL","permalink":"https://zhoufengbin.github.io/tags/MySQL/"}]},{"title":"多线程","date":"2022-01-01T03:59:31.000Z","path":"2022/01/01/多线程/","text":"1. 多线程简介","tags":[{"name":"多线程","slug":"多线程","permalink":"https://zhoufengbin.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"}]},{"title":"Java常用API","date":"2021-12-31T16:08:39.000Z","path":"2022/01/01/Java常用API/","text":"1. String常用方法1.1 截取功能1","tags":[{"name":"Java基础","slug":"Java基础","permalink":"https://zhoufengbin.github.io/tags/Java%E5%9F%BA%E7%A1%80/"}]}]